"""
‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô OCR Module
"""

from extract_receipt import ReceiptExtractor
from utils.validation import validate_receipt_data


def example_basic():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
    print("=== ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 1: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ===\n")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á extractor
    extractor = ReceiptExtractor(use_gpu=False)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô True ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ GPU

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ
    result = extractor.extract_receipt_data('test_image.jpg')

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    print(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {result.date}")
    print(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: {result.amount} ‡∏ö‡∏≤‡∏ó")
    print(f"‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°: {result.fee} ‡∏ö‡∏≤‡∏ó")
    print(f"‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤: {result.merchant}")
    print(f"‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á: {result.sender_name}")
    print(f"‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö: {result.receiver_name}")
    print(f"‡πÄ‡∏•‡∏Ç‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: {result.reference_id}")
    print(f"‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤: {result.source}")
    print(f"‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: {result.overall_confidence:.1%}\n")


def example_with_validation():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏° validation"""
    print("=== ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 2: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏° Validation ===\n")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á extractor
    extractor = ReceiptExtractor(use_gpu=False)

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    result = extractor.extract_receipt_data('test_image.jpg')
    data = result.to_dict()

    # Validate ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    validation = validate_receipt_data(data, strict_mode=False)

    print(f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {'‚úì ‡∏ú‡πà‡∏≤‡∏ô' if validation.is_valid else '‚úó ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô'}")
    print(f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô Validation: {validation.validation_score:.1%}\n")

    if validation.issues:
        print("‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö:")
        for issue in validation.issues:
            severity_icon = {
                'error': 'üî¥',
                'warning': 'üü°',
                'info': 'üîµ'
            }.get(issue.severity, '‚ö™')

            print(f"  {severity_icon} [{issue.severity.upper()}] {issue.field}")
            print(f"     {issue.message}")
            if issue.suggested_value:
                print(f"     ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {issue.suggested_value}")
        print()

    # ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
    corrected_data = validation.corrected_data
    print("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
    print(f"  ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: {corrected_data.get('amount')} ‡∏ö‡∏≤‡∏ó")
    print(f"  ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°: {corrected_data.get('fee')} ‡∏ö‡∏≤‡∏ó")
    print()


def example_save_to_database():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á database (‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö database ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)"""
    print("=== ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 3: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Database ===\n")

    extractor = ReceiptExtractor(use_gpu=False)
    result = extractor.extract_receipt_data('test_image.jpg')
    data = result.to_dict()

    # Validate ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    validation = validate_receipt_data(data)

    if validation.is_valid:
        corrected_data = validation.corrected_data

        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å (‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö database ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
        """
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MySQL
        import mysql.connector

        conn = mysql.connector.connect(
            host='localhost',
            user='your_user',
            password='your_password',
            database='your_database'
        )
        cursor = conn.cursor()

        query = '''
        INSERT INTO transactions
        (date, amount, fee, merchant, sender, receiver, reference_id, source_type, confidence)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s)
        '''

        values = (
            corrected_data.get('date'),
            corrected_data.get('amount'),
            corrected_data.get('fee'),
            corrected_data.get('merchant'),
            corrected_data.get('sender_name'),
            corrected_data.get('receiver_name'),
            corrected_data.get('reference_id'),
            corrected_data.get('source', {}).get('type'),
            corrected_data.get('overall_confidence')
        )

        cursor.execute(query, values)
        conn.commit()

        print(f"‚úì ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! Transaction ID: {cursor.lastrowid}")

        cursor.close()
        conn.close()
        """

        print("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:")
        print(f"  Date: {corrected_data.get('date')}")
        print(f"  Amount: {corrected_data.get('amount')}")
        print(f"  Merchant: {corrected_data.get('merchant')}")
        print("\n(‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö database ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)")
    else:
        print("‚úó ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô validation - ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á database")
        print(f"‡∏õ‡∏±‡∏ç‡∏´‡∏≤: {len(validation.issues)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")


def example_batch_processing():
    """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå"""
    print("=== ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà 4: ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå ===\n")

    import os

    # ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
    image_files = [
        'receipt1.jpg',
        'receipt2.jpg',
        'receipt3.jpg'
    ]

    extractor = ReceiptExtractor(use_gpu=False)
    results = []

    for image_file in image_files:
        if not os.path.exists(image_file):
            print(f"‚ö† ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {image_file}")
            continue

        print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {image_file}...")

        result = extractor.extract_receipt_data(image_file)
        data = result.to_dict()

        # Validate
        validation = validate_receipt_data(data)

        if validation.is_valid:
            results.append({
                'file': image_file,
                'data': validation.corrected_data,
                'confidence': validation.validation_score
            })
            print(f"  ‚úì ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Confidence: {validation.validation_score:.1%})")
        else:
            print(f"  ‚úó ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ({len(validation.issues)} ‡∏õ‡∏±‡∏ç‡∏´‡∏≤)")

    print(f"\n‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {len(results)}/{len(image_files)} ‡πÑ‡∏ü‡∏•‡πå")

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏•‡∏á database
    # for item in results:
    #     save_to_database(item['data'])


if __name__ == "__main__":
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô

    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    # example_basic()

    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏° validation (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)
    # example_with_validation()

    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å database
    # example_save_to_database()

    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå
    # example_batch_processing()

    print("üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç example_usage.py ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô")
