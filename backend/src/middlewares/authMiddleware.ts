import { Request, Response, NextFunction } from 'express';
import jwt from 'jsonwebtoken';

// 1. üö® ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (‡πÉ‡∏ä‡πâ SECRET_KEY ‡∏à‡∏≤‡∏Å .env ‡πÅ‡∏•‡∏∞ Fail-Fast)
const SECRET_KEY = process.env.SECRET_KEY;

if (!SECRET_KEY) {
  console.error("FATAL ERROR: SECRET_KEY is not defined in .env file.");
  process.exit(1); // ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Key
}

// 2. ‚å®Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Payload ‡πÉ‡∏ô JWT
interface JwtPayload {
  user_id: number;
  username: string;
  role: string;
}

// 3. ‚å®Ô∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Request ‡∏ó‡∏µ‡πà‡∏°‡∏µ user
// (‡∏ß‡∏¥‡∏ò‡∏µ‡∏ô‡∏µ‡πâ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ (req as any))
export interface AuthRequest extends Request {
  user?: JwtPayload;
}

// ‚úÖ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢) ‡πÉ‡∏ä‡πâ AuthRequest
export const verifyAdmin = (req: AuthRequest, res: Response, next: NextFunction) => {
  const authHeader = req.headers.authorization;

  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ status: false, message: 'Unauthorized: Missing or invalid Bearer token' });
  }

  const token = authHeader.split(' ')[1];
  try {
    // 1. üö® ‡πÉ‡∏ä‡πâ SECRET_KEY ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ !) ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    const decoded = jwt.verify(token, SECRET_KEY) as JwtPayload;

    if (decoded.role !== 'admin') {
      return res.status(403).json({ status: false, message: 'Forbidden: Admins only' });
    }

    req.user = decoded; // ‚úÖ ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ TypeScript ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å req.user ‡πÅ‡∏•‡πâ‡∏ß
    next();

  } catch (err) {
    return res.status(401).json({ status: false, message: 'Invalid or expired token' });
  }
};

// ‚úÖ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà) ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö verifyAdmin (try...catch)
export const authenticateToken = (req: AuthRequest, res: Response, next: NextFunction) => {
  const authHeader = req.headers.authorization;

  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ status: false, message: 'Unauthorized: Missing or invalid Bearer token' });
  }

  const token = authHeader.split(' ')[1];
  try {
    // 1. üö® ‡πÉ‡∏ä‡πâ SECRET_KEY ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    const decoded = jwt.verify(token, SECRET_KEY) as JwtPayload;

    req.user = decoded; // ‚úÖ TypeScript ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å
    next();

  } catch (err) {
    return res.status(401).json({ status: false, message: 'Invalid or expired token' });
  }
};