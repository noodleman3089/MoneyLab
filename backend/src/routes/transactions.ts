import express, { Request, Response, NextFunction } from 'express';
import { body, validationResult } from 'express-validator';
import { query } from '../index';
import { authenticateToken } from '../middlewares/authMiddleware';

interface AuthRequest extends Request {
  user?: { user_id: number; role: string };
}

const routes_T = express.Router();

/* ------------------ POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà ------------------ */
routes_T.post(
  '/',
  authenticateToken,
  [
    body('type').isIn(['income', 'expense', 'transfer']).withMessage('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'),
    body('amount').isFloat({ gt: 0 }).withMessage('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0'),
    body('fee').optional().isFloat({ min: 0 }).withMessage('‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö'),
    body('category_id').optional().isInt({ gt: 0 }),
    body('sender_name').optional().isString(),
    body('receiver_name').optional().isString(),
    body('reference_id').optional().isString(),
    body('payment_source').optional().isString(),
    body('transaction_date').isDate().withMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (YYYY-MM-DD)'),
  ],
  async (req: AuthRequest, res: Response) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ status: false, errors: errors.array() });
    }

    const userId = req.user!.user_id;
    const {
      type,
      amount,
      fee = 0,
      category_id,
      sender_name,
      receiver_name,
      reference_id,
      payment_source,
      transaction_date,
      data_source = 'manual',
      confidence = null
    } = req.body;

    try {
      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ category_id ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö type
      if (category_id) {
        const cat = await query(
          'SELECT * FROM category WHERE category_id = ? AND category_type = ?',
          [category_id, type]
        );
        if (cat.length === 0) {
          return res.status(400).json({
            status: false,
            message: 'category_id ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (type)',
          });
        }
      }
      let walletId: number | null = null;
          const wallet = await query(
          'SELECT wallet_id FROM wallet WHERE user_id = ? LIMIT 1',
          [userId]
          );
          if (wallet.length === 0) {
            // üÜï ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ wallet ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
            const createWallet = await query(
              'INSERT INTO wallet (user_id, wallet_name, currency, balance) VALUES (?, ?, ?, 0)',
              [userId, 'Main Wallet', 'THB']
            );
            walletId = createWallet.insertId;
            console.log(`üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á wallet ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user_id=${userId} ‚Üí wallet_id=${walletId}`);
          } else {
            walletId = wallet[0].wallet_id;
          }

      await query(
        `INSERT INTO transactions
          (user_id, wallet_id, category_id, type, amount, fee, sender_name, receiver_name,
           reference_id, payment_source, data_source, confidence, transaction_date)
         VALUES (?, ?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          userId,
          walletId,
          category_id || null,
          type,
          amount,
          fee,
          sender_name || null,
          receiver_name || null,
          reference_id || null,
          payment_source || null,
          data_source,
          confidence,
          transaction_date,
        ]
      );

      res.json({ status: true, message: 'Transaction created successfully' });
    } catch (err) {
      console.error(err);
      res.status(500).json({ status: false, message: 'Database error' });
    }
  }
);

export default routes_T;