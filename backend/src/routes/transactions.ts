import express, { Request, Response } from 'express';
import { body, validationResult } from 'express-validator';
import { query } from '../index';
import { authenticateToken } from '../middlewares/authMiddleware';
import { sendEmail } from '../sendEmail/sendEmail';

interface AuthRequest extends Request {
  user?: { user_id: number; role: string };
}

const routes_T = express.Router();

/* ------------------ POST: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà ------------------ */
routes_T.post(
  '/',
  authenticateToken,
  [
    // üü¢ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ type ‡πÅ‡∏•‡πâ‡∏ß
    body('amount').isFloat({ gt: 0 }).withMessage('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0'),
    body('fee').optional().isFloat({ min: 0 }).withMessage('‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏•‡∏ö'),
    body('category_id').isInt({ gt: 0 }).withMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ category_id ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'),
    body('sender_name').optional().isString(),
    body('receiver_name').optional().isString(),
    body('reference_id').optional().isString(),
    body('payment_source').optional().isString(),
    // üü° ‡∏ó‡∏≥‡πÉ‡∏´‡πâ transaction_date optional ‡πÑ‡∏î‡πâ
    body('transaction_date').optional().isDate().withMessage('‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (YYYY-MM-DD)'),
  ],
  async (req: AuthRequest, res: Response) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ status: false, errors: errors.array() });
    }

    const userId = req.user!.user_id;
    const {
      amount,
      fee = 0,
      category_id,
      sender_name,
      receiver_name,
      reference_id,
      payment_source,
      transaction_date, // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞ undefined
      data_source = 'manual',
      confidence = null
    } = req.body;

    try {
      // ‚úÖ ‡∏î‡∏∂‡∏á category_type ‡∏à‡∏≤‡∏Å category_id
      const cat = await query('SELECT category_type FROM category WHERE category_id = ?', [category_id]);
      if (cat.length === 0) {
        return res.status(400).json({
          status: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö category_id ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
        });
      }

      const type = cat[0].category_type;

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á wallet
      let walletId: number | null = null;
      const wallet = await query('SELECT wallet_id FROM wallet WHERE user_id = ? LIMIT 1', [userId]);
      if (wallet.length === 0) {
        const createWallet = await query(
          'INSERT INTO wallet (user_id, wallet_name, currency, balance) VALUES (?, ?, ?, 0)',
          [userId, 'Main Wallet', 'THB']
        );
        walletId = createWallet.insertId;
        console.log(`üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á wallet ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user_id=${userId} ‚Üí wallet_id=${walletId}`);
      } else {
        walletId = wallet[0].wallet_id;
      }

      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ transaction_date ‚Üí ‡πÉ‡∏ä‡πâ NOW()
      const dateToUse = transaction_date || new Date().toISOString().slice(0, 10);

      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á transactions
      await query(
        `INSERT INTO transactions
          (user_id, wallet_id, category_id, type, amount, fee, sender_name, receiver_name,
           reference_id, payment_source, data_source, confidence, transaction_date)
         VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          userId,
          walletId,
          category_id,
          type,
          amount,
          fee,
          sender_name || null,
          receiver_name || null,
          reference_id || null,
          payment_source || null,
          data_source,
          confidence,
          dateToUse,
        ]
      );

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏â‡∏û‡∏≤‡∏∞ transaction ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      if (type === 'expense') {
        const today = new Date().toISOString().slice(0, 10);

        // üîπ ‡∏î‡∏∂‡∏á‡∏á‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        const [budget]: any = await query(
          `SELECT budget_id, target_spend, 
                  (SELECT COALESCE(SUM(amount),0) 
                  FROM transactions 
                  WHERE user_id = ? AND type = 'expense' 
                  AND DATE(transaction_date) = ?) AS total_spent
          FROM daily_budget 
          WHERE user_id = ? AND budget_date = ? 
          LIMIT 1`,
          [userId, today] //  userId, today ‡∏•‡∏ö‡πÑ‡∏õ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ã‡πâ‡∏≥
        );

        if (budget) {
          const {budget_id} = budget;
          const target_spend = parseFloat(budget.target_spend ?? 0);
          const total_spent = parseFloat(budget.total_spent ?? 0);
          const percentUsed = target_spend > 0 ? (total_spent / target_spend) * 100 : 0;

          let shouldNotify = false;
          let notifyType: 'warning' | 'error' | null = null;
          let title = '';
          let message = '';

          if (percentUsed >= 100) {
            shouldNotify = true;
            notifyType = 'error';
            title = '‡∏á‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß!';
            message = `‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${today} ‡πÅ‡∏•‡πâ‡∏ß (${total_spent.toFixed(2)} / ${target_spend.toFixed(2)} ‡∏ö‡∏≤‡∏ó)`;
          } else if (percentUsed >= 50) {
            shouldNotify = true;
            notifyType = 'warning';
            title = '‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏á‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß!';
            message = `‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ${percentUsed.toFixed(0)}% ‡∏Ç‡∏≠‡∏á‡∏á‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (${total_spent.toFixed(2)} / ${target_spend.toFixed(2)} ‡∏ö‡∏≤‡∏ó)`;
          }

          if (shouldNotify && notifyType) {
            // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á notifications
            await query(
              `INSERT INTO notifications 
              (user_id, type, title, message, reference_type, reference_id)
              VALUES (?, ?, ?, ?, 'daily_budget', ?)`,
              [userId, notifyType, title, message, budget_id]
            );

            // ‚úÖ ‡∏î‡∏∂‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            const [userInfo]: any = await query(
              `SELECT email, username FROM users WHERE user_id = ? LIMIT 1`,
              [userId]
            );

            if (userInfo?.email) {
              await sendEmail(
                userInfo.email,
                title,
                message,
                `
                  <div style="font-family:sans-serif;line-height:1.6">
                    <h3>${title}</h3>
                    <p>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∏‡∏ì ${userInfo.username || ''},</p>
                    <p>${message}</p>
                    <hr/>
                    <small>‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å MoneyLab</small>
                  </div>
                `
              );
              console.log(`üìß Budget alert sent to ${userInfo.email}`);
            }
          }
        }
      }

      res.json({
        status: true,
        message: `Transaction created successfully (type=${type}, date=${dateToUse})`,
      });
    } catch (err) {
      console.error(err);
      res.status(500).json({ status: false, message: 'Database error' });
    }
  }
);

export default routes_T;