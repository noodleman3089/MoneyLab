import express, { Request, Response } from 'express';
import multer from 'multer';
import { spawn } from 'child_process';
import path from 'path';
import fs from 'fs';
import { query } from '../../index';
import { authenticateToken } from '../middlewares/authMiddleware';

const routerOCR = express.Router();

const uploadDir = path.resolve(__dirname, '../../uploads');
if (!fs.existsSync(uploadDir)) fs.mkdirSync(uploadDir, { recursive: true });

// üß© ‡∏Å‡∏≥‡∏´‡∏ô‡∏î storage ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏≠‡∏á
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    const ext = path.extname(file.originalname); // ‡∏î‡∏∂‡∏á .jpg / .png ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
    const uniqueName = `${Date.now()}-${Math.round(Math.random() * 1e9)}${ext}`;
    cb(null, uniqueName);
  }
});

const upload = multer({ storage });

// Route: OCR upload
routerOCR.post(
  '/',
  authenticateToken,
  upload.single('receipt'),
  async (req: Request, res: Response) => {
    if (!req.file) {
      return res.status(400).json({ status: false, message: 'No file uploaded' });
    }

    const imagePath = path.resolve(req.file.path);
    const scriptPath = path.resolve(__dirname, '../../model/ocr_module/extract_receipt.py');

    console.log('Python script path:', scriptPath);
    console.log('Image path:', imagePath);

    try {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Python OCR module ‡∏û‡∏£‡πâ‡∏≠‡∏° --quiet
      const pythonProcess = spawn('python', [
        scriptPath,
        imagePath,
      ]);

      let stdoutData = '';
      let stderrData = '';

      pythonProcess.stdout.on('data', (chunk) => {
        stdoutData += chunk.toString();
      });

      pythonProcess.stderr.on('data', (err) => {
        stderrData += err.toString();
      });

      pythonProcess.on('close', async (code) => {

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö error ‡∏à‡∏≤‡∏Å Python
        if (stderrData.trim()) {
          console.error('OCR stderr:', stderrData);
        }

        if (code !== 0) {
          console.error('Python exited with code', code);
          return res.status(500).json({
            status: false,
            message: 'OCR process failed',
            error: stderrData || 'Unknown error',
          });
        }

        try {
          // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ JSON (‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á Python ‡∏≠‡∏≤‡∏à print log ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
          const cleaned = stdoutData
            .split('\n')
            .map(line => line.trim())
            .filter(line => line.startsWith('{') || line.startsWith('['))
            .pop();

          if (!cleaned) {
            console.error('OCR output did not contain valid JSON:', stdoutData);
            return res.status(500).json({ status: false, message: 'Invalid OCR output (no JSON found)' });
          }

          const result = JSON.parse(cleaned);
          const userId = (req as any).user.user_id;

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
          if (!result.amount || !result.date) {
            return res.status(400).json({
              status: false,
              message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏à‡∏≤‡∏Å OCR',
              raw: result,
            });
          }

          // ‡∏´‡∏≤ category ‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (income/expense)
          const category = await query(
            'SELECT category_id FROM category WHERE category_type = ? LIMIT 1',
            [result.amount > 0 ? 'income' : 'expense']
          );

          function parseThaiDate(thaiDate: string): string | null {
            if (!thaiDate) return null;

            // ‡∏•‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏Å‡∏¥‡∏ô ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥ "‡∏ô." ‡∏≠‡∏≠‡∏Å
            const cleanDate = thaiDate.replace(/\s+/g, ' ').replace('‡∏ô.', '').trim();

            const months: Record<string, string> = {
              '‡∏°.‡∏Ñ.': '01', '‡∏Å.‡∏û.': '02', '‡∏°‡∏µ.‡∏Ñ.': '03', '‡πÄ‡∏°.‡∏¢.': '04',
              '‡∏û.‡∏Ñ.': '05', '‡∏°‡∏¥.‡∏¢.': '06', '‡∏Å.‡∏Ñ.': '07', '‡∏™.‡∏Ñ.': '08',
              '‡∏Å.‡∏¢.': '09', '‡∏ï.‡∏Ñ.': '10', '‡∏û.‡∏¢.': '11', '‡∏ò.‡∏Ñ.': '12'
            };

            // regex ‡πÉ‡∏´‡∏°‡πà: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ã‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Äú‡∏ô.‚Äù
            const regex = /(\d{1,2})\s*([‡∏Å-‡∏Æ]{2,3}\.)\s*(\d{2,4})(?:\s+(\d{1,2}:\d{2}))?/;
            const match = cleanDate.match(regex);
            if (!match) return null;

            let [_, day, monthTh, year, time] = match;
            const month = months[monthTh] || '01';
            let y = parseInt(year, 10);

            // ‡πÅ‡∏õ‡∏•‡∏á ‡∏û.‡∏®. ‚Üí ‡∏Ñ.‡∏®. / ‡∏õ‡∏µ 2 ‡∏´‡∏•‡∏±‡∏Å ‚Üí ‡∏Ñ.‡∏®.
            if (y > 2400) y -= 543;
            else if (y < 100) y += 2500 - 543;

            const dateStr = `${y}-${month}-${day.padStart(2, '0')}`;
            return time ? `${dateStr} ${time}:00` : `${dateStr} 00:00:00`;
          }

          const transactionDate = parseThaiDate(result.date) || new Date().toISOString().slice(0, 19).replace('T', ' ');
          if (!transactionDate) {
            return res.status(400).json({
              status: false,
              message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å OCR ‡πÑ‡∏î‡πâ',
              raw_date: result.date,
            });
          }

          // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OCR ‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
          if (
            !result.amount ||
            !result.date ||
            !result.receiver_name ||
            result.overall_confidence < 0.4
          ) {
            return res.status(400).json({
              status: false,
              message: '‡∏£‡∏π‡∏õ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå (0.4)',
              raw: result,
            });
          }

          // üß† ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
          let categoryId: number | null = null;

          // 1Ô∏è‚É£ ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
          const prev = await query(
            `SELECT t.category_id, c.category_type, c.category_name
            FROM transactions t
            LEFT JOIN category c ON t.category_id = c.category_id
            WHERE t.receiver_name = ?
            ORDER BY t.created_at DESC
            LIMIT 1`,
            [result.receiver_name]
          );

          if (prev.length === 0) {
            // 2Ô∏è‚É£ ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô ‚Üí ‡∏ï‡∏±‡πâ‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà "other"
            const other = await query(
              `SELECT category_id FROM category WHERE category_name = '‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡πá‡∏î‡πÄ‡∏ï‡∏•‡πá‡∏î' OR category_name = '‡∏≠‡∏∑‡πà‡∏ô‡πÜ' LIMIT 1`
            );
            categoryId = other[0]?.category_id || null;
            console.log(`üÜï ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà ‚Üí ‡πÉ‡∏ä‡πâ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà 'other'`);
          } else if (prev[0].category_name === '‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡πá‡∏î‡πÄ‡∏ï‡∏•‡πá‡∏î' || prev[0].category_name === '‡∏≠‡∏∑‡πà‡∏ô‡πÜ') {
            // 3Ô∏è‚É£ ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏¢‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏ß‡πà‡∏≤ "other" ‚Üí ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°
            categoryId = prev[0].category_id;
            console.log(`‚ôªÔ∏è ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏õ‡πá‡∏ô 'other' ‚Üí ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°`);
          } else {
            // 4Ô∏è‚É£ ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ‚Üí ‡πÉ‡∏ä‡πâ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ô‡∏±‡πâ‡∏ô
            categoryId = prev[0].category_id;
            console.log(`üîÅ ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà '${prev[0].category_name}' ‚Üí ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥`);
          }

          // ‚úÖ ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏¢ ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡πá‡∏î‡πÄ‡∏ï‡∏•‡πá‡∏î" (‡∏Å‡∏±‡∏ô‡∏û‡∏±‡∏á)
          if (!categoryId) {
            const fallback = await query(
              `SELECT category_id FROM category WHERE category_name = '‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡πá‡∏î‡πÄ‡∏ï‡∏•‡πá‡∏î' OR category_name = '‡∏≠‡∏∑‡πà‡∏ô‡πÜ' LIMIT 1`
            );
            categoryId = fallback[0]?.category_id || null;
          }


          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          await query(
            `INSERT INTO transactions 
            (user_id, category_id, type, amount, fee, sender_name, receiver_name,
            reference_id, payment_source, data_source, confidence, transaction_date, receipt_image_url)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 'ocr', ?, ?, ?)`,
            [
              userId,
              categoryId,
              result.amount > 0 ? 'income' : 'expense',
              result.amount || 0,
              result.fee || 0,
              result.sender_name || null,
              result.receiver_name || null,
              result.reference_id || null,
              result.source?.brand || 'unknown',
              result.overall_confidence || 0,
              transactionDate,
              req.file ? `uploads/${req.file.filename}` : null
            ]
          );


          res.json({
            status: true,
            message: 'OCR data processed and stored successfully',
            data: result,
          });
        } catch (err) {
          console.error('Failed to parse or save OCR result:', err);
          res.status(500).json({ status: false, message: 'Failed to save OCR result' });
        }
      });
    } catch (err) {
      console.error('Server error:', err);
      res.status(500).json({ status: false, message: 'Server error' });
    }
  }
);

export default routerOCR;
