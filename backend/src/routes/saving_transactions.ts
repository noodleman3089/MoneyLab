import express, { Request, Response } from 'express';
import { body, validationResult } from 'express-validator';
import { query } from '../index';
import { authenticateToken } from '../middlewares/authMiddleware';

const routerSavingTx = express.Router();

/**
 * ‚úÖ POST /saving-transactions
 * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≠‡∏î‡∏≠‡∏≠‡∏° (deposit) ‡πÄ‡∏Ç‡πâ‡∏≤ goal ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï progress
 * ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô transaction_date
 * ‚úÖ ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö wallet_id ‡∏Ç‡∏≠‡∏á user ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
 */
routerSavingTx.post(
  '/',
  authenticateToken,
  [
    body('goal_id').isInt({ gt: 0 }).withMessage('goal_id ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç'),
    body('amount').isFloat({ gt: 0 }).withMessage('amount ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0'),
  ],
  async (req: Request, res: Response) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ status: false, errors: errors.array() });
    }

    const userId = (req as any).user.user_id;
    const { goal_id, amount } = req.body;

    try {
      // ‚úÖ 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ goal ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞ active
      const goalRows = await query(
        'SELECT target_amount, current_amount, status FROM saving_goals WHERE goal_id = ? AND user_id = ?',
        [goal_id, userId]
      );

      if (goalRows.length === 0) {
        return res.status(404).json({ status: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡∏≠‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏ô‡∏µ‡πâ' });
      }

      const goal = goalRows[0];
      if (goal.status !== 'active') {
        return res.status(400).json({
          status: false,
          message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏≠‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ goal ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà active',
        });
      }

      // ‚úÖ 2. ‡∏´‡∏≤ wallet_id ‡∏Ç‡∏≠‡∏á user (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á)
      let walletId: number | null = null;
      const walletRows = await query(
        'SELECT wallet_id FROM wallet WHERE user_id = ? LIMIT 1',
        [userId]
      );

      if (walletRows.length === 0) {
        // üÜï ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ wallet ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ä‡∏∑‡πà‡∏≠ Main Wallet
        const createWallet = await query(
          'INSERT INTO wallet (user_id, wallet_name, currency, balance) VALUES (?, ?, ?, 0)',
          [userId, 'Main Wallet', 'THB']
        );
        walletId = createWallet.insertId;
        console.log(`üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á wallet ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user_id=${userId} ‚Üí wallet_id=${walletId}`);
      } else {
        walletId = walletRows[0].wallet_id;
      }

      // ‚úÖ 3. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô saving_transactions (‡πÉ‡∏ä‡πâ NOW() ‡∏à‡∏≤‡∏Å DB)
      await query(
        `INSERT INTO saving_transactions 
         (user_id, goal_id, wallet_id, amount, transaction_date, status)
         VALUES (?, ?, ?, ?, NOW(), 'completed')`,
        [userId, goal_id, walletId, amount]
      );

      // ‚úÖ 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î current_amount
      const newAmount = parseFloat(goal.current_amount) + parseFloat(amount);

      // ‚úÖ 5. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì progress (%)
      const progress = Math.min((newAmount / goal.target_amount) * 100, 100).toFixed(2);

      // ‚úÖ 6. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ goal ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß
      const newStatus = newAmount >= goal.target_amount ? 'completed' : goal.status;

      await query(
        `UPDATE saving_goals
         SET current_amount = ?, status = ?, updated_at = NOW(),
             completed_at = CASE WHEN ? = 'completed' THEN NOW() ELSE completed_at END
         WHERE goal_id = ?`,
        [newAmount, newStatus, newStatus, goal_id]
      );

      // ‚úÖ 7. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡πÉ‡∏ô wallet (‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏•‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å wallet ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏°)
      await query(
        `UPDATE wallet 
         SET balance = balance - ?, updated_at = NOW()
         WHERE wallet_id = ?`,
        [amount, walletId]
      );

      res.json({
        status: true,
        message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≠‡∏î‡∏≠‡∏≠‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: {
          goal_id,
          new_amount: newAmount,
          target_amount: goal.target_amount,
          progress_percent: progress,
          status: newStatus,
          wallet_id: walletId,
          transaction_date: new Date().toISOString(),
        },
      });
    } catch (err) {
      console.error('‚ùå saving-transactions error:', err);
      res.status(500).json({ status: false, message: 'Server error' });
    }
  }
);

export default routerSavingTx;
