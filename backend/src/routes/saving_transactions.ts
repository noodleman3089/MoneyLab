import express, { Request, Response } from 'express';
import { body, validationResult } from 'express-validator';
import { query } from '../index';
import { authenticateToken } from '../middlewares/authMiddleware';

const routerSavingTx = express.Router();

/**
 * ‚úÖ POST /saving-transactions
 * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≠‡∏î‡∏≠‡∏≠‡∏° (deposit) ‡πÄ‡∏Ç‡πâ‡∏≤ goal ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï progress
 * ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô transaction_date
 * ‚úÖ ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö wallet_id ‡∏Ç‡∏≠‡∏á user ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
 * ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô wallet ‡∏ß‡πà‡∏≤‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï completed_at ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏°‡∏Ñ‡∏£‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
 */
routerSavingTx.post(
  '/',
  authenticateToken,
  [
    body('goal_id').isInt({ gt: 0 }).withMessage('goal_id ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç'),
    body('amount').isFloat({ gt: 0 }).withMessage('amount ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0'),
  ],
  async (req: Request, res: Response) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ status: false, errors: errors.array() });
    }

    const userId = (req as any).user.user_id;
    const { goal_id, amount } = req.body;

    try {
      // ‚úÖ 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ goal ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞ active
      const goalRows = await query(
        'SELECT target_amount, current_amount, status, wallet_id FROM saving_goals WHERE goal_id = ? AND user_id = ?',
        [goal_id, userId]
      );

      if (goalRows.length === 0) {
        return res.status(404).json({ status: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏≠‡∏≠‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏ô‡∏µ‡πâ' });
      }

      const goal = goalRows[0];
      if (goal.status !== 'active') {
        return res.status(400).json({
          status: false,
          message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏≠‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ goal ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà active',
        });
      }

      // ‚úÖ 2. ‡∏´‡∏≤ wallet ‡∏Ç‡∏≠‡∏á user (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á)
      let walletId: number | null = goal.wallet_id || null;
      if (!walletId) {
        const walletRows = await query('SELECT wallet_id FROM wallet WHERE user_id = ? LIMIT 1', [userId]);
        if (walletRows.length === 0) {
          const createWallet = await query(
            'INSERT INTO wallet (user_id, wallet_name, currency, balance) VALUES (?, ?, ?, 0)',
            [userId, 'Main Wallet', 'THB']
          );
          walletId = createWallet.insertId;
        } else {
          walletId = walletRows[0].wallet_id;
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï goal ‡πÉ‡∏´‡πâ‡∏°‡∏µ wallet_id ‡∏î‡πâ‡∏ß‡∏¢
        await query('UPDATE saving_goals SET wallet_id = ? WHERE goal_id = ?', [walletId, goal_id]);
      }

      // ‚úÖ 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô wallet ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≠‡∏°
      const wallet = await query('SELECT balance FROM wallet WHERE wallet_id = ?', [walletId]);
      if (wallet.length === 0) {
        return res.status(400).json({ status: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
      }

      const walletBalance = parseFloat(wallet[0].balance);
      if (walletBalance < parseFloat(amount)) {
        return res.status(400).json({
          status: false,
          message: `‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô wallet ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ (‡∏°‡∏µ ${walletBalance} ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ${amount})`,
        });
      }

      // ‚úÖ 4. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô saving_transactions
      await query(
        `INSERT INTO saving_transactions 
         (user_id, goal_id, wallet_id, amount, transaction_date, status)
         VALUES (?, ?, ?, ?, NOW(), 'completed')`,
        [userId, goal_id, walletId, amount]
      );

      // ‚úÖ 5. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î current_amount
      const newAmount = parseFloat(goal.current_amount) + parseFloat(amount);
      const progress = Math.min((newAmount / goal.target_amount) * 100, 100).toFixed(2);

      // ‚úÖ 6. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ goal (‡∏û‡∏£‡πâ‡∏≠‡∏° completed_at)
      const newStatus = newAmount >= goal.target_amount ? 'completed' : goal.status;
      await query(
        `UPDATE saving_goals
         SET current_amount = ?, status = ?, updated_at = NOW(),
             completed_at = CASE WHEN ? = 'completed' THEN NOW() ELSE completed_at END
         WHERE goal_id = ?`,
        [newAmount, newStatus, newStatus, goal_id]
      );

      // ‚úÖ 7. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡πÉ‡∏ô wallet (‡∏•‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏°)
      await query(
        `UPDATE wallet 
         SET balance = balance - ?, updated_at = NOW()
         WHERE wallet_id = ?`,
        [amount, walletId]
      );

      // ‚úÖ 8. ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö client
      res.json({
        status: true,
        message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≠‡∏î‡∏≠‡∏≠‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: {
          goal_id,
          wallet_id: walletId,
          amount: parseFloat(amount),
          new_amount: newAmount,
          target_amount: goal.target_amount,
          progress_percent: progress,
          status: newStatus,
          transaction_date: new Date().toISOString(),
        },
      });
    } catch (err) {
      console.error('‚ùå saving-transactions error:', err);
      res.status(500).json({ status: false, message: 'Server error' });
    }
  }
);

routerSavingTx.post('/auto-deduct', authenticateToken, async (req: Request, res: Response) => {
  const userId = (req as any).user.user_id;

  try {
    // üß≠ 1) ‡∏î‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà active ‡πÅ‡∏•‡∏∞‡∏ñ‡∏∂‡∏á‡∏£‡∏≠‡∏ö‡∏´‡∏±‡∏Å
    const goals: any[] = await query(
      `SELECT g.goal_id, g.user_id, g.wallet_id, g.goal_name, g.contribution_amount,
              g.current_amount, g.target_amount, g.frequency, g.next_deduction_date,
              g.status,
              w.balance AS wallet_balance
       FROM saving_goals g
       JOIN wallet w ON g.wallet_id = w.wallet_id
       WHERE g.user_id = ? 
         AND g.status = 'active'
         AND (g.next_deduction_date IS NULL OR g.next_deduction_date <= CURDATE())`,
      [userId]
    );

    if (goals.length === 0) {
      return res.json({ status: true, message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏∂‡∏á‡∏£‡∏≠‡∏ö‡∏´‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ' });
    }

    // üßÆ 2) ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞ goal
    for (const goal of goals) {
      const {
        goal_id,
        wallet_id,
        wallet_balance,
        contribution_amount,
        frequency,
        current_amount,
        target_amount,
      } = goal;

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÑ‡∏´‡∏°
      if (wallet_balance < contribution_amount) {
        console.warn(`‚ùå wallet_id=${wallet_id} ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏´‡∏±‡∏Å contribution_amount=${contribution_amount}`);
        continue;
      }

      // ‚úÖ ‡∏´‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å wallet 
      await query(
        `UPDATE wallet 
         SET balance = balance - ?, 
             updated_at = NOW()
         WHERE wallet_id = ?`,
        [contribution_amount, wallet_id]
      );

      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° record ‡∏•‡∏á‡πÉ‡∏ô saving_transactions
      await query(
        `INSERT INTO saving_transactions 
         (user_id, goal_id, wallet_id, amount, transaction_date, status)
         VALUES (?, ?, ?, ?, NOW(), 'completed')`,
        [userId, goal_id, wallet_id, contribution_amount]
      );

      // ‚úÖ ‡∏ö‡∏ß‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô goal
      const newAmount = parseFloat(current_amount) + parseFloat(contribution_amount);
      let newStatus = goal.status;
      let completedAt: Date | null = null;

      if (newAmount >= target_amount) {
        newStatus = 'completed';
        completedAt = new Date();
      }

      // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ï‡∏≤‡∏° frequency
      let nextDate: Date | null = null;
      const now = new Date();
      if (frequency === 'daily') nextDate = new Date(now.setDate(now.getDate() + 1));
      else if (frequency === 'weekly') nextDate = new Date(now.setDate(now.getDate() + 7));
      else if (frequency === 'monthly') nextDate = new Date(now.setMonth(now.getMonth() + 1));
      else if (frequency === 'one-time') nextDate = null;

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ goal
      await query(
        `UPDATE saving_goals 
         SET current_amount = ?, 
             status = ?, 
             next_deduction_date = ?, 
             completed_at = CASE WHEN ? = 'completed' THEN NOW() ELSE completed_at END,
             updated_at = NOW()
         WHERE goal_id = ?`,
        [newAmount, newStatus, nextDate, newStatus, goal_id]
      );
    }

    res.json({ status: true, message: '‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    console.error('üí• Auto-deduct error:', err);
    res.status(500).json({ status: false, message: 'Database error' });
  }
});

export default routerSavingTx;