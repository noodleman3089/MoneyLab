import express, { Request, Response, NextFunction } from 'express';
import { body, validationResult } from 'express-validator';
import bcrypt from 'bcryptjs';
import { sendEmail } from '../sendEmail/sendEmail';
import { query } from '../index';
import moment from 'moment-timezone';

const controllers_R = express();

/* =============================
   1Ô∏è‚É£ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (‡∏™‡πà‡∏á OTP)
   ============================= */
controllers_R.post('/register',
  [
    body('username').isString().notEmpty().withMessage('Username is required'),
    body('password').isLength({ min: 8 }).withMessage('Password must be at least 8 characters'),
    body('confirmPassword').custom((value, { req }) => {
      if (value !== req.body.password) {
        throw new Error('Password confirmation does not match password');
      }
      return true;
    }),
    body('email').isEmail().withMessage('Invalid email format'),
    body('phone_number').optional().isMobilePhone('any').withMessage('Invalid phone number'),
  ],
  async (req: Request, res: Response, next: NextFunction) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).send({ message: 'Validation errors', errors: errors.array(), status: false });
    }

    const { username, password, email, phone_number } = req.body;
    try {
      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥‡πÑ‡∏´‡∏°
      const existingUser = await query(
        'SELECT * FROM users WHERE username=? OR email=? OR phone_number=?',
        [username, email, phone_number || null]
      );

      if (existingUser.length > 0) {
        return res.status(409).send({ message: 'User already exists (username/email/phone_number)', status: false });
      }

      // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™ OTP
      const otpCode = Math.floor(100000 + Math.random() * 900000).toString();
      const expiresAt = moment().tz("Asia/Bangkok").add(5, 'minutes').format("YYYY-MM-DD HH:mm:ss");

      const salt = await bcrypt.genSalt(10);
      const password_hash = await bcrypt.hash(password, salt);

      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å OTP ‡∏•‡∏á DB (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡∏à‡∏£‡∏¥‡∏á)
      await query(
        `INSERT INTO otp_verification (email, otp_code, username, phone_number, password_hash, expires_at)
         VALUES (?, ?, ?, ?, ?, ?)`,
        [email, otpCode, username, phone_number || null, password_hash, expiresAt]
      );

      // ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• OTP
      await sendEmail(
        email,
        '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å - MoneyLab üßæ',
        `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${username}, ‡∏£‡∏´‡∏±‡∏™‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ ${otpCode}`,
        `<h2>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</h2><p>‡∏£‡∏´‡∏±‡∏™ OTP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ <b>${otpCode}</b> (‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ)</p>`
      );

      res.send({
        status: true,
        message: 'OTP has been sent to your email',
        email
      });
    } catch (err) {
      console.error(err);
      next(err);
    }
  }
);

/* =============================
   2Ô∏è‚É£ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô OTP (‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏à‡∏£‡∏¥‡∏á)
   ============================= */
controllers_R.post('/verify-otp',
  [
    body('email').isEmail().withMessage('Invalid email'),
    body('otp').isLength({ min: 6, max: 6 }).withMessage('OTP must be 6 digits'),
  ],
  async (req: Request, res: Response) => {
    const { email, otp } = req.body;

    try {
      const [record] = await query(
        'SELECT * FROM otp_verification WHERE email = ? AND otp_code = ? AND verified = 0',
        [email, otp]
      );

      if (!record) {
        return res.status(400).json({ status: false, message: 'Invalid OTP or already verified' });
      }

      if (new Date(record.expires_at) < new Date()) {
        return res.status(400).json({ status: false, message: 'OTP expired' });
      }

      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å user ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô users table
      await query(
        'INSERT INTO users (username, email, phone_number, password_hash) VALUES (?, ?, ?, ?)',
        [record.username, record.email, record.phone_number, record.password_hash]
      );

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤ OTP ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
      await query('UPDATE otp_verification SET verified = 1 WHERE id = ?', [record.id]);

      res.json({ status: true, message: 'Account verified and created successfully' });
    } catch (err) {
      console.error(err);
      res.status(500).json({ status: false, message: 'Database error' });
    }
  }
);

export default controllers_R;