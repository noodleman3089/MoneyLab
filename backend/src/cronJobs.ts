import cron from 'node-cron';
import { query } from './index';
import { sendEmail } from './sendEmail/sendEmail';

console.log('üöÄ Cron job service started...');

/**
 * üïí Job: ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏°‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô
 * - ‡∏´‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å wallet ‡∏ï‡∏≤‡∏° contribution_amount
 * - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï saving_goals.current_amount
 * - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï totalSavingOut ‡πÉ‡∏ô wallet
 * - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ï‡∏≤‡∏° frequency
 */
cron.schedule('*/1 * * * *', async () => { // '*/1 * * * *' for testing every minute for production use '0 0 * * *'
  console.log('‚è∞ Running auto saving deduction job...');

  try {
    const goals: any[] = await query(`
      SELECT g.goal_id, g.user_id, g.wallet_id, g.goal_name,
             g.contribution_amount, g.frequency,
             g.current_amount, g.target_amount,
             w.balance AS wallet_balance
      FROM saving_goals g
      JOIN wallet w ON g.wallet_id = w.wallet_id
      WHERE g.status = 'active'
    `);

    if (goals.length === 0) {
      console.log('‚ÑπÔ∏è No active saving goals found.');
      return;
    }

    for (const goal of goals) {
      const {
        goal_id,
        wallet_id,
        goal_name,
        contribution_amount,
        wallet_balance,
        frequency,
        current_amount,
        target_amount
      } = goal;

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏≠‡∏ö‡∏ï‡∏≤‡∏° frequency
      const now = new Date();
      let shouldDeduct = false;

      switch (frequency) {
        case 'daily': shouldDeduct = true; break;
        case 'weekly': shouldDeduct = now.getDay() === 1; break; // ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå
        case 'monthly': shouldDeduct = now.getDate() === 1; break; // ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1
        case 'one-time': shouldDeduct = true; break;
      }

      if (!shouldDeduct) continue;

      const balanceNum = parseFloat(wallet_balance);
      const contributionNum = parseFloat(contribution_amount);

      // ‚ùå ‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏û‡∏≠
      if (balanceNum < contributionNum) {
        console.warn(`‚ö†Ô∏è Wallet ${wallet_id} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏û‡∏≠‡∏´‡∏±‡∏Å ${contributionNum}`);
        continue;
      }

      // ‚úÖ ‡∏´‡∏±‡∏Å wallet
      await query(
        `UPDATE wallet 
         SET balance = balance - ?,
             updated_at = NOW()
         WHERE wallet_id = ?`,
        [contribution_amount, wallet_id]
      );

      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≠‡∏î‡πÉ‡∏ô saving goal
      const newAmount = parseFloat(current_amount) + parseFloat(contribution_amount);
      const newStatus = newAmount >= target_amount ? 'completed' : 'active';

      // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      let nextDate: Date | null = null;
      if (frequency === 'daily') nextDate = new Date(Date.now() + 24 * 60 * 60 * 1000);
      else if (frequency === 'weekly') nextDate = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000);
      else if (frequency === 'monthly') nextDate = new Date(new Date().setMonth(new Date().getMonth() + 1));

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï goal
      await query(
        `UPDATE saving_goals 
         SET current_amount = ?, 
             status = ?, 
             next_deduction_date = ?, 
             completed_at = CASE WHEN ? = 'completed' THEN NOW() ELSE completed_at END,
             updated_at = NOW()
         WHERE goal_id = ?`,
        [newAmount, newStatus, nextDate, newStatus, goal_id]
      );

      await query(
        `INSERT INTO saving_transactions 
        (user_id, wallet_id, goal_id, amount, status, transaction_date) 
        VALUES (?, ?, ?, ?, 'completed', NOW())`,
        [goal.user_id, wallet_id, goal_id, contribution_amount]
      );

      await query(
        `INSERT INTO notifications 
          (user_id, type, title, message, reference_type, reference_id)
        VALUES (?, ?, ?, ?, ?, ?)`,
        [
          goal.user_id,
          'success',
          '‡∏´‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
          `‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏´‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô ${contributionNum.toFixed(2)} ‡∏ö‡∏≤‡∏ó
          ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ "${goal.goal_name}" ‡πÅ‡∏•‡πâ‡∏ß ‚úÖ`,
          'goal',
          goal.goal_id
        ]
      );

      // ‚úÖ (Option) ‡∏î‡∏∂‡∏á email ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      const [user]: any = await query('SELECT email FROM users WHERE user_id = ?', [goal.user_id]);
      if (user?.email) {
        await sendEmail(
          user.email,
          'üìâ ‡∏´‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
          `<h3>üìâ ‡∏´‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏≠‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</h3>
          <p>‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏´‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${contributionNum.toFixed(2)} ‡∏ö‡∏≤‡∏ó
          ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ "${goal.goal_name}" ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‚úÖ</p>`
        );
      }

    console.log(`‚úÖ Goal "${goal_name}" updated (+${contribution_amount}), wallet_id=${wallet_id}`);
    }
    console.log('‚úÖ Cron job finished successfully.');
  } catch (err) {
    console.error('‚ùå Cron job error:', err);
  }
});